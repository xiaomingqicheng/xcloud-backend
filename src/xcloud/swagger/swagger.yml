swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /cert/:
    get:
      tags:
      - cert
      description: get all Users
      operationId: CertController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - cert
      description: create object
      operationId: CertController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /cluster/:
    get:
      tags:
      - cluster
      description: get all Users
      operationId: ClusterController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - cluster
      description: create object
      operationId: ClusterController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /cluster/{id}:
    get:
      tags:
      - cluster
      description: get Cluster by id
      operationId: ClusterController.GetOne
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Cluster'
        "403":
          description: :id is empty
    put:
      tags:
      - cluster
      description: update the user
      operationId: ClusterController.Update
      parameters:
      - in: path
        name: id
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :id is not int
    delete:
      tags:
      - cluster
      description: delete the Cluster
      operationId: ClusterController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /cluster/{uid}:
    get:
      tags:
      - cluster
      description: get user by uid
      operationId: ClusterController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
  /clusterdetail/{clustername}:
    get:
      tags:
      - clusterdetail
      description: get cluster by uid
      operationId: ClusterdetailController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Cluster'
        "403":
          description: :uid is empty
  /clusterresdetail/:
    get:
      tags:
      - clusterresdetail
      description: get cluster by uid
      operationId: ClusterresdetailController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Cluster'
        "403":
          description: :uid is empty
  /env/:
    get:
      tags:
      - env
      description: get all Users
      operationId: EnvController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - env
      description: create Env
      operationId: EnvController.Create
      parameters:
      - in: body
        name: body
        description: The env content
        required: true
        schema:
          $ref: '#/definitions/models.Env'
      responses:
        "200":
          description: '{string} models.Env.Id'
        "403":
          description: body is empty
  /env/{id}:
    get:
      tags:
      - env
      description: get user by uid
      operationId: EnvController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
  /object/:
    get:
      tags:
      - object
      description: get all objects
      operationId: ObjectController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - object
      description: create object
      operationId: ObjectController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /object/{objectId}:
    get:
      tags:
      - object
      description: find object by objectid
      operationId: ObjectController.Get
      parameters:
      - in: path
        name: objectId
        description: the objectid you want to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    put:
      tags:
      - object
      description: update the object
      operationId: ObjectController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - object
      description: delete the object
      operationId: ObjectController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /registry/:
    get:
      tags:
      - registry
      description: get all Users
      operationId: RegistryController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - registry
      description: create object
      operationId: RegistryController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /user/:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /user/{uid}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /user/login:
    get:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
definitions:
  models.Cert:
    title: Cert
    type: object
    properties:
      Crt:
        type: string
      Id:
        type: integer
        format: int64
      Key:
        type: string
      Registry:
        type: array
        items:
          $ref: '#/definitions/models.Registry'
      Remark:
        type: string
  models.Cluster:
    title: Cluster
    type: object
    properties:
      Apiserver_ip:
        type: string
      Apiserver_port:
        type: string
      Cacrt:
        type: string
      Env:
        type: array
        items:
          $ref: '#/definitions/models.Env'
      Id:
        type: integer
        format: int64
      Name:
        type: string
      Privitekey:
        type: string
      Publickey:
        type: string
      Registry:
        type: array
        items:
          $ref: '#/definitions/models.Registry'
  models.Env:
    title: Env
    type: object
    properties:
      Clusters:
        type: array
        items:
          $ref: '#/definitions/models.Cluster'
      Id:
        type: integer
        format: int64
      Name:
        type: string
      Registry:
        type: array
        items:
          $ref: '#/definitions/models.Registry'
  models.Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
  models.Profile:
    title: Profile
    type: object
    properties:
      Address:
        type: string
      Age:
        type: integer
        format: int64
      Email:
        type: string
      Gender:
        type: string
  models.Registry:
    title: Registry
    type: object
    properties:
      Cert:
        $ref: '#/definitions/models.Cert'
      Cluster:
        $ref: '#/definitions/models.Cluster'
      Domain:
        type: string
      Env:
        $ref: '#/definitions/models.Env'
      Hostpath:
        type: string
      Id:
        type: integer
        format: int64
      Name:
        type: string
  models.User:
    title: User
    type: object
    properties:
      Id:
        type: string
      Password:
        type: string
      Profile:
        $ref: '#/definitions/models.Profile'
      Username:
        type: string
tags:
- name: object
  description: |
    Operations about object
- name: user
  description: |
    Operations about Users
- name: cluster
  description: |
    Operations about object
- name: clusterdetail
  description: |
    Operations about object
- name: clusterresdetail
  description: |
    Operations about object
- name: env
  description: |
    Operations about Env
- name: registry
  description: |
    Operations about object
- name: cert
  description: |
    Operations about object
